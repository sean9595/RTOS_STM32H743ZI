
RTOS_config_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a28  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cd0  08001cd0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001cd0  08001cd0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cd0  08001cd0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd0  08001cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cd4  08001cd4  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08001cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  08001ce8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  08001ce8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf7e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199d  00000000  00000000  0002cfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  0002e960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  0002ef60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033cde  00000000  00000000  0002f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f11  00000000  00000000  000631a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b990  00000000  00000000  0006a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b5a47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a0  00000000  00000000  001b5a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001ca8 	.word	0x08001ca8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001ca8 	.word	0x08001ca8

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 f9d8 	bl	8000690 <HAL_Init>

  /* USER CODE BEGIN Init */
  HW_init();
 80002e0:	f000 f8cc 	bl	800047c <HW_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f80a 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f884 	bl	80003f4 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80002ec:	2180      	movs	r1, #128	; 0x80
 80002ee:	4802      	ldr	r0, [pc, #8]	; (80002f8 <main+0x20>)
 80002f0:	f000 fd19 	bl	8000d26 <HAL_GPIO_TogglePin>
 80002f4:	e7fa      	b.n	80002ec <main+0x14>
 80002f6:	bf00      	nop
 80002f8:	58020400 	.word	0x58020400

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b09c      	sub	sp, #112	; 0x70
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000306:	224c      	movs	r2, #76	; 0x4c
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fcc4 	bl	8001c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2220      	movs	r2, #32
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fcbe 	bl	8001c98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800031c:	2002      	movs	r0, #2
 800031e:	f000 fd1d 	bl	8000d5c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000322:	2300      	movs	r3, #0
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	4b31      	ldr	r3, [pc, #196]	; (80003ec <SystemClock_Config+0xf0>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a30      	ldr	r2, [pc, #192]	; (80003ec <SystemClock_Config+0xf0>)
 800032c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <SystemClock_Config+0xf0>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <SystemClock_Config+0xf4>)
 800033e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000340:	4a2b      	ldr	r2, [pc, #172]	; (80003f0 <SystemClock_Config+0xf4>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <SystemClock_Config+0xf4>)
 800034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	603b      	str	r3, [r7, #0]
 8000352:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000354:	bf00      	nop
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemClock_Config+0xf0>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800035e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000362:	d1f8      	bne.n	8000356 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000364:	2302      	movs	r3, #2
 8000366:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000368:	2301      	movs	r3, #1
 800036a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036c:	2340      	movs	r3, #64	; 0x40
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000370:	2302      	movs	r3, #2
 8000372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000374:	2300      	movs	r3, #0
 8000376:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000378:	2304      	movs	r3, #4
 800037a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800037c:	233c      	movs	r3, #60	; 0x3c
 800037e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000380:	2302      	movs	r3, #2
 8000382:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000384:	2302      	movs	r3, #2
 8000386:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000388:	2302      	movs	r3, #2
 800038a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800038c:	230c      	movs	r3, #12
 800038e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000390:	2300      	movs	r3, #0
 8000392:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fd17 	bl	8000dd0 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003a8:	f000 f86f 	bl	800048a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	233f      	movs	r3, #63	; 0x3f
 80003ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b0:	2303      	movs	r3, #3
 80003b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003b8:	2308      	movs	r3, #8
 80003ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003bc:	2340      	movs	r3, #64	; 0x40
 80003be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003c0:	2340      	movs	r3, #64	; 0x40
 80003c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003ca:	2340      	movs	r3, #64	; 0x40
 80003cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2104      	movs	r1, #4
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 f90c 	bl	80015f0 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80003de:	f000 f854 	bl	800048a <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3770      	adds	r7, #112	; 0x70
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	58024800 	.word	0x58024800
 80003f0:	58000400 	.word	0x58000400

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_GPIO_Init+0x80>)
 800040c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000410:	4a18      	ldr	r2, [pc, #96]	; (8000474 <MX_GPIO_Init+0x80>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_GPIO_Init+0x80>)
 800041c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_GPIO_Init+0x80>)
 800042a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042e:	4a11      	ldr	r2, [pc, #68]	; (8000474 <MX_GPIO_Init+0x80>)
 8000430:	f043 0302 	orr.w	r3, r3, #2
 8000434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_GPIO_Init+0x80>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043e:	f003 0302 	and.w	r3, r3, #2
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	480b      	ldr	r0, [pc, #44]	; (8000478 <MX_GPIO_Init+0x84>)
 800044c:	f000 fc52 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2300      	movs	r3, #0
 800045e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	f107 030c 	add.w	r3, r7, #12
 8000464:	4619      	mov	r1, r3
 8000466:	4804      	ldr	r0, [pc, #16]	; (8000478 <MX_GPIO_Init+0x84>)
 8000468:	f000 fa94 	bl	8000994 <HAL_GPIO_Init>

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	58024400 	.word	0x58024400
 8000478:	58020400 	.word	0x58020400

0800047c <HW_init>:

/* USER CODE BEGIN 4 */
void HW_init(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048e:	b672      	cpsid	i
}
 8000490:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000492:	e7fe      	b.n	8000492 <Error_Handler+0x8>

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <HAL_MspInit+0x30>)
 800049c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004a0:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <HAL_MspInit+0x30>)
 80004a2:	f043 0302 	orr.w	r3, r3, #2
 80004a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_MspInit+0x30>)
 80004ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004b0:	f003 0302 	and.w	r3, r3, #2
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	58024400 	.word	0x58024400

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
//  while (1)
//  {
//  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <MemManage_Handler+0x4>

080004e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler+0x4>

080004ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051c:	f000 f92a 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000528:	4b39      	ldr	r3, [pc, #228]	; (8000610 <SystemInit+0xec>)
 800052a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800052e:	4a38      	ldr	r2, [pc, #224]	; (8000610 <SystemInit+0xec>)
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000538:	4b36      	ldr	r3, [pc, #216]	; (8000614 <SystemInit+0xf0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 030f 	and.w	r3, r3, #15
 8000540:	2b06      	cmp	r3, #6
 8000542:	d807      	bhi.n	8000554 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000544:	4b33      	ldr	r3, [pc, #204]	; (8000614 <SystemInit+0xf0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f023 030f 	bic.w	r3, r3, #15
 800054c:	4a31      	ldr	r2, [pc, #196]	; (8000614 <SystemInit+0xf0>)
 800054e:	f043 0307 	orr.w	r3, r3, #7
 8000552:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000554:	4b30      	ldr	r3, [pc, #192]	; (8000618 <SystemInit+0xf4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a2f      	ldr	r2, [pc, #188]	; (8000618 <SystemInit+0xf4>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000560:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <SystemInit+0xf4>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <SystemInit+0xf4>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	492b      	ldr	r1, [pc, #172]	; (8000618 <SystemInit+0xf4>)
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <SystemInit+0xf8>)
 800056e:	4013      	ands	r3, r2
 8000570:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000572:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemInit+0xf0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	2b00      	cmp	r3, #0
 800057c:	d007      	beq.n	800058e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemInit+0xf0>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f023 030f 	bic.w	r3, r3, #15
 8000586:	4a23      	ldr	r2, [pc, #140]	; (8000614 <SystemInit+0xf0>)
 8000588:	f043 0307 	orr.w	r3, r3, #7
 800058c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemInit+0xf4>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <SystemInit+0xf4>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemInit+0xf4>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <SystemInit+0xf4>)
 80005a2:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <SystemInit+0xfc>)
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <SystemInit+0xf4>)
 80005a8:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <SystemInit+0x100>)
 80005aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <SystemInit+0xf4>)
 80005ae:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <SystemInit+0x104>)
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <SystemInit+0xf4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <SystemInit+0xf4>)
 80005ba:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <SystemInit+0x104>)
 80005bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <SystemInit+0xf4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <SystemInit+0xf4>)
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <SystemInit+0x104>)
 80005c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <SystemInit+0xf4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <SystemInit+0xf4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a10      	ldr	r2, [pc, #64]	; (8000618 <SystemInit+0xf4>)
 80005d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <SystemInit+0xf4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <SystemInit+0x108>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <SystemInit+0x10c>)
 80005e8:	4013      	ands	r3, r2
 80005ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005ee:	d202      	bcs.n	80005f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <SystemInit+0x110>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <SystemInit+0x114>)
 80005f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80005fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <SystemInit+0xec>)
 8000600:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000604:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	52002000 	.word	0x52002000
 8000618:	58024400 	.word	0x58024400
 800061c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000620:	02020200 	.word	0x02020200
 8000624:	01ff0000 	.word	0x01ff0000
 8000628:	01010280 	.word	0x01010280
 800062c:	5c001000 	.word	0x5c001000
 8000630:	ffff0000 	.word	0xffff0000
 8000634:	51008108 	.word	0x51008108
 8000638:	52004000 	.word	0x52004000

0800063c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800063c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000674 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000640:	f7ff ff70 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000644:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000646:	e003      	b.n	8000650 <LoopCopyDataInit>

08000648 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800064a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800064c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800064e:	3104      	adds	r1, #4

08000650 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000654:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000656:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000658:	d3f6      	bcc.n	8000648 <CopyDataInit>
  ldr  r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800065c:	e002      	b.n	8000664 <LoopFillZerobss>

0800065e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800065e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000660:	f842 3b04 	str.w	r3, [r2], #4

08000664 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000666:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000668:	d3f9      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066a:	f001 faf1 	bl	8001c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800066e:	f7ff fe33 	bl	80002d8 <main>
  bx  lr    
 8000672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000674:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000678:	08001cd8 	.word	0x08001cd8
  ldr  r0, =_sdata
 800067c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000680:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000684:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000688:	24000030 	.word	0x24000030

0800068c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC3_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000696:	2003      	movs	r0, #3
 8000698:	f000 f94a 	bl	8000930 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800069c:	f001 f95e 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80006a0:	4602      	mov	r2, r0
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_Init+0x68>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	4913      	ldr	r1, [pc, #76]	; (80006fc <HAL_Init+0x6c>)
 80006ae:	5ccb      	ldrb	r3, [r1, r3]
 80006b0:	f003 031f 	and.w	r3, r3, #31
 80006b4:	fa22 f303 	lsr.w	r3, r2, r3
 80006b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_Init+0x68>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_Init+0x6c>)
 80006c4:	5cd3      	ldrb	r3, [r2, r3]
 80006c6:	f003 031f 	and.w	r3, r3, #31
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	fa22 f303 	lsr.w	r3, r2, r3
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_Init+0x70>)
 80006d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <HAL_Init+0x74>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f814 	bl	8000708 <HAL_InitTick>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e002      	b.n	80006f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006ea:	f7ff fed3 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58024400 	.word	0x58024400
 80006fc:	08001cc0 	.word	0x08001cc0
 8000700:	24000004 	.word	0x24000004
 8000704:	24000000 	.word	0x24000000

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_InitTick+0x60>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e021      	b.n	8000760 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_InitTick+0x64>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_InitTick+0x60>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f921 	bl	800097a <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000750:	f000 f8f9 	bl	8000946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x68>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2400000c 	.word	0x2400000c
 800076c:	24000000 	.word	0x24000000
 8000770:	24000008 	.word	0x24000008

08000774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x20>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_IncTick+0x24>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_IncTick+0x24>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	2400000c 	.word	0x2400000c
 8000798:	2400002c 	.word	0x2400002c

0800079c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_GetTick+0x14>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	2400002c 	.word	0x2400002c

080007b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_GetREVID+0x14>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	0c1b      	lsrs	r3, r3, #16
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	5c001000 	.word	0x5c001000

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <__NVIC_SetPriorityGrouping+0x40>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	4313      	orrs	r3, r2
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <__NVIC_SetPriorityGrouping+0x40>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00
 8000810:	05fa0000 	.word	0x05fa0000

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008fc:	d301      	bcc.n	8000902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fe:	2301      	movs	r3, #1
 8000900:	e00f      	b.n	8000922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <SysTick_Config+0x40>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090a:	210f      	movs	r1, #15
 800090c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000910:	f7ff ff8e 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <SysTick_Config+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <SysTick_Config+0x40>)
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	e000e010 	.word	0xe000e010

08000930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff47 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff5e 	bl	8000814 <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ff90 	bl	8000884 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff5f 	bl	8000830 <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffb2 	bl	80008ec <SysTick_Config>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80009a2:	4b89      	ldr	r3, [pc, #548]	; (8000bc8 <HAL_GPIO_Init+0x234>)
 80009a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80009a6:	e194      	b.n	8000cd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	2101      	movs	r1, #1
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 8186 	beq.w	8000ccc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d00b      	beq.n	80009e0 <HAL_GPIO_Init+0x4c>
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d007      	beq.n	80009e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d4:	2b11      	cmp	r3, #17
 80009d6:	d003      	beq.n	80009e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b12      	cmp	r3, #18
 80009de:	d130      	bne.n	8000a42 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a16:	2201      	movs	r2, #1
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	4013      	ands	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	091b      	lsrs	r3, r3, #4
 8000a2c:	f003 0201 	and.w	r2, r3, #1
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0xee>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d123      	bne.n	8000aca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	08da      	lsrs	r2, r3, #3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3208      	adds	r2, #8
 8000a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	220f      	movs	r2, #15
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	f003 0307 	and.w	r3, r3, #7
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	08da      	lsrs	r2, r3, #3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3208      	adds	r2, #8
 8000ac4:	69b9      	ldr	r1, [r7, #24]
 8000ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0203 	and.w	r2, r3, #3
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 80e0 	beq.w	8000ccc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <HAL_GPIO_Init+0x238>)
 8000b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b12:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <HAL_GPIO_Init+0x238>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <HAL_GPIO_Init+0x238>)
 8000b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b2a:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <HAL_GPIO_Init+0x23c>)
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	3302      	adds	r3, #2
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	220f      	movs	r2, #15
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <HAL_GPIO_Init+0x240>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d052      	beq.n	8000bfc <HAL_GPIO_Init+0x268>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <HAL_GPIO_Init+0x244>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d031      	beq.n	8000bc2 <HAL_GPIO_Init+0x22e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <HAL_GPIO_Init+0x248>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d02b      	beq.n	8000bbe <HAL_GPIO_Init+0x22a>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <HAL_GPIO_Init+0x24c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d025      	beq.n	8000bba <HAL_GPIO_Init+0x226>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <HAL_GPIO_Init+0x250>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d01f      	beq.n	8000bb6 <HAL_GPIO_Init+0x222>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <HAL_GPIO_Init+0x254>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d019      	beq.n	8000bb2 <HAL_GPIO_Init+0x21e>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a1a      	ldr	r2, [pc, #104]	; (8000bec <HAL_GPIO_Init+0x258>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d013      	beq.n	8000bae <HAL_GPIO_Init+0x21a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_GPIO_Init+0x25c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d00d      	beq.n	8000baa <HAL_GPIO_Init+0x216>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_GPIO_Init+0x260>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d007      	beq.n	8000ba6 <HAL_GPIO_Init+0x212>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_GPIO_Init+0x264>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_GPIO_Init+0x20e>
 8000b9e:	2309      	movs	r3, #9
 8000ba0:	e02d      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	e02b      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	e029      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000baa:	2307      	movs	r3, #7
 8000bac:	e027      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000bae:	2306      	movs	r3, #6
 8000bb0:	e025      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	e023      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	e021      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e01f      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	e01d      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e01b      	b.n	8000bfe <HAL_GPIO_Init+0x26a>
 8000bc6:	bf00      	nop
 8000bc8:	58000080 	.word	0x58000080
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58000400 	.word	0x58000400
 8000bd4:	58020000 	.word	0x58020000
 8000bd8:	58020400 	.word	0x58020400
 8000bdc:	58020800 	.word	0x58020800
 8000be0:	58020c00 	.word	0x58020c00
 8000be4:	58021000 	.word	0x58021000
 8000be8:	58021400 	.word	0x58021400
 8000bec:	58021800 	.word	0x58021800
 8000bf0:	58021c00 	.word	0x58021c00
 8000bf4:	58022000 	.word	0x58022000
 8000bf8:	58022400 	.word	0x58022400
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	69fa      	ldr	r2, [r7, #28]
 8000c00:	f002 0203 	and.w	r2, r2, #3
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	4093      	lsls	r3, r2
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c0e:	4938      	ldr	r1, [pc, #224]	; (8000cf0 <HAL_GPIO_Init+0x35c>)
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3302      	adds	r3, #2
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4013      	ands	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f47f ae63 	bne.w	80009a8 <HAL_GPIO_Init+0x14>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	3724      	adds	r7, #36	; 0x24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	58000400 	.word	0x58000400

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000d10:	e003      	b.n	8000d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	041a      	lsls	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	619a      	str	r2, [r3, #24]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d38:	887a      	ldrh	r2, [r7, #2]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	041a      	lsls	r2, r3, #16
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	400b      	ands	r3, r1
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	619a      	str	r2, [r3, #24]
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_PWREx_ConfigSupply+0x70>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d00a      	beq.n	8000d86 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_PWREx_ConfigSupply+0x70>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d001      	beq.n	8000d82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e01f      	b.n	8000dc2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e01d      	b.n	8000dc2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_PWREx_ConfigSupply+0x70>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	f023 0207 	bic.w	r2, r3, #7
 8000d8e:	490f      	ldr	r1, [pc, #60]	; (8000dcc <HAL_PWREx_ConfigSupply+0x70>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000d96:	f7ff fd01 	bl	800079c <HAL_GetTick>
 8000d9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000d9c:	e009      	b.n	8000db2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000d9e:	f7ff fcfd 	bl	800079c <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dac:	d901      	bls.n	8000db2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e007      	b.n	8000dc2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_PWREx_ConfigSupply+0x70>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dbe:	d1ee      	bne.n	8000d9e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	58024800 	.word	0x58024800

08000dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e3ff      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8087 	beq.w	8000efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df0:	4b99      	ldr	r3, [pc, #612]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000dfa:	4b97      	ldr	r3, [pc, #604]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e02:	2b10      	cmp	r3, #16
 8000e04:	d007      	beq.n	8000e16 <HAL_RCC_OscConfig+0x46>
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	2b18      	cmp	r3, #24
 8000e0a:	d110      	bne.n	8000e2e <HAL_RCC_OscConfig+0x5e>
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d10b      	bne.n	8000e2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e16:	4b90      	ldr	r3, [pc, #576]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d06c      	beq.n	8000efc <HAL_RCC_OscConfig+0x12c>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d168      	bne.n	8000efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e3d9      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e36:	d106      	bne.n	8000e46 <HAL_RCC_OscConfig+0x76>
 8000e38:	4b87      	ldr	r3, [pc, #540]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a86      	ldr	r2, [pc, #536]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	e02e      	b.n	8000ea4 <HAL_RCC_OscConfig+0xd4>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x98>
 8000e4e:	4b82      	ldr	r3, [pc, #520]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a81      	ldr	r2, [pc, #516]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b7f      	ldr	r3, [pc, #508]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7e      	ldr	r2, [pc, #504]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e01d      	b.n	8000ea4 <HAL_RCC_OscConfig+0xd4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0xbc>
 8000e72:	4b79      	ldr	r3, [pc, #484]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a78      	ldr	r2, [pc, #480]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b76      	ldr	r3, [pc, #472]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a75      	ldr	r2, [pc, #468]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e00b      	b.n	8000ea4 <HAL_RCC_OscConfig+0xd4>
 8000e8c:	4b72      	ldr	r3, [pc, #456]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a71      	ldr	r2, [pc, #452]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b6f      	ldr	r3, [pc, #444]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d013      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eac:	f7ff fc76 	bl	800079c <HAL_GetTick>
 8000eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fc72 	bl	800079c <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e38d      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ec6:	4b64      	ldr	r3, [pc, #400]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0xe4>
 8000ed2:	e014      	b.n	8000efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc62 	bl	800079c <HAL_GetTick>
 8000ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fc5e 	bl	800079c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	; 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e379      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f0      	bne.n	8000edc <HAL_RCC_OscConfig+0x10c>
 8000efa:	e000      	b.n	8000efe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 80ae 	beq.w	8001068 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f0c:	4b52      	ldr	r3, [pc, #328]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f16:	4b50      	ldr	r3, [pc, #320]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_RCC_OscConfig+0x162>
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	2b18      	cmp	r3, #24
 8000f26:	d13a      	bne.n	8000f9e <HAL_RCC_OscConfig+0x1ce>
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d135      	bne.n	8000f9e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f32:	4b49      	ldr	r3, [pc, #292]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d005      	beq.n	8000f4a <HAL_RCC_OscConfig+0x17a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e34b      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4a:	f7ff fc33 	bl	80007b4 <HAL_GetREVID>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d817      	bhi.n	8000f88 <HAL_RCC_OscConfig+0x1b8>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	2b40      	cmp	r3, #64	; 0x40
 8000f5e:	d108      	bne.n	8000f72 <HAL_RCC_OscConfig+0x1a2>
 8000f60:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f68:	4a3b      	ldr	r2, [pc, #236]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f70:	e07a      	b.n	8001068 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	031b      	lsls	r3, r3, #12
 8000f80:	4935      	ldr	r1, [pc, #212]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f86:	e06f      	b.n	8001068 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	061b      	lsls	r3, r3, #24
 8000f96:	4930      	ldr	r1, [pc, #192]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9c:	e064      	b.n	8001068 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d045      	beq.n	8001032 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 0219 	bic.w	r2, r3, #25
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	4929      	ldr	r1, [pc, #164]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fbf0 	bl	800079c <HAL_GetTick>
 8000fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fbec 	bl	800079c <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e307      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fde:	f7ff fbe9 	bl	80007b4 <HAL_GetREVID>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f241 0203 	movw	r2, #4099	; 0x1003
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d817      	bhi.n	800101c <HAL_RCC_OscConfig+0x24c>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b40      	cmp	r3, #64	; 0x40
 8000ff2:	d108      	bne.n	8001006 <HAL_RCC_OscConfig+0x236>
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000ffc:	4a16      	ldr	r2, [pc, #88]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8000ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001002:	6053      	str	r3, [r2, #4]
 8001004:	e030      	b.n	8001068 <HAL_RCC_OscConfig+0x298>
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	031b      	lsls	r3, r3, #12
 8001014:	4910      	ldr	r1, [pc, #64]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8001016:	4313      	orrs	r3, r2
 8001018:	604b      	str	r3, [r1, #4]
 800101a:	e025      	b.n	8001068 <HAL_RCC_OscConfig+0x298>
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	061b      	lsls	r3, r3, #24
 800102a:	490b      	ldr	r1, [pc, #44]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
 8001030:	e01a      	b.n	8001068 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_RCC_OscConfig+0x288>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103e:	f7ff fbad 	bl	800079c <HAL_GetTick>
 8001042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fba9 	bl	800079c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d903      	bls.n	800105c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e2c4      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
 8001058:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800105c:	4ba4      	ldr	r3, [pc, #656]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1ee      	bne.n	8001046 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80a9 	beq.w	80011c8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001076:	4b9e      	ldr	r3, [pc, #632]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800107e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001080:	4b9b      	ldr	r3, [pc, #620]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d007      	beq.n	800109c <HAL_RCC_OscConfig+0x2cc>
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2b18      	cmp	r3, #24
 8001090:	d13a      	bne.n	8001108 <HAL_RCC_OscConfig+0x338>
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d135      	bne.n	8001108 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800109c:	4b94      	ldr	r3, [pc, #592]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x2e4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	2b80      	cmp	r3, #128	; 0x80
 80010ae:	d001      	beq.n	80010b4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e296      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010b4:	f7ff fb7e 	bl	80007b4 <HAL_GetREVID>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80010be:	4293      	cmp	r3, r2
 80010c0:	d817      	bhi.n	80010f2 <HAL_RCC_OscConfig+0x322>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d108      	bne.n	80010dc <HAL_RCC_OscConfig+0x30c>
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80010d2:	4a87      	ldr	r2, [pc, #540]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80010d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010da:	e075      	b.n	80011c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010dc:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	069b      	lsls	r3, r3, #26
 80010ea:	4981      	ldr	r1, [pc, #516]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010f0:	e06a      	b.n	80011c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010f2:	4b7f      	ldr	r3, [pc, #508]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	061b      	lsls	r3, r3, #24
 8001100:	497b      	ldr	r1, [pc, #492]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001102:	4313      	orrs	r3, r2
 8001104:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001106:	e05f      	b.n	80011c8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d042      	beq.n	8001196 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001110:	4b77      	ldr	r3, [pc, #476]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a76      	ldr	r2, [pc, #472]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111c:	f7ff fb3e 	bl	800079c <HAL_GetTick>
 8001120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001124:	f7ff fb3a 	bl	800079c <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e255      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001136:	4b6e      	ldr	r3, [pc, #440]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001142:	f7ff fb37 	bl	80007b4 <HAL_GetREVID>
 8001146:	4603      	mov	r3, r0
 8001148:	f241 0203 	movw	r2, #4099	; 0x1003
 800114c:	4293      	cmp	r3, r2
 800114e:	d817      	bhi.n	8001180 <HAL_RCC_OscConfig+0x3b0>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	2b20      	cmp	r3, #32
 8001156:	d108      	bne.n	800116a <HAL_RCC_OscConfig+0x39a>
 8001158:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001160:	4a63      	ldr	r2, [pc, #396]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001162:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001166:	6053      	str	r3, [r2, #4]
 8001168:	e02e      	b.n	80011c8 <HAL_RCC_OscConfig+0x3f8>
 800116a:	4b61      	ldr	r3, [pc, #388]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	069b      	lsls	r3, r3, #26
 8001178:	495d      	ldr	r1, [pc, #372]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800117a:	4313      	orrs	r3, r2
 800117c:	604b      	str	r3, [r1, #4]
 800117e:	e023      	b.n	80011c8 <HAL_RCC_OscConfig+0x3f8>
 8001180:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	4958      	ldr	r1, [pc, #352]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001190:	4313      	orrs	r3, r2
 8001192:	60cb      	str	r3, [r1, #12]
 8001194:	e018      	b.n	80011c8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001196:	4b56      	ldr	r3, [pc, #344]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a55      	ldr	r2, [pc, #340]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800119c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff fafb 	bl	800079c <HAL_GetTick>
 80011a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80011aa:	f7ff faf7 	bl	800079c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e212      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011bc:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f0      	bne.n	80011aa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d036      	beq.n	8001242 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d019      	beq.n	8001210 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011dc:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80011de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e0:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fad8 	bl	800079c <HAL_GetTick>
 80011ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fad4 	bl	800079c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e1ef      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x420>
 800120e:	e018      	b.n	8001242 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001214:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121c:	f7ff fabe 	bl	800079c <HAL_GetTick>
 8001220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001224:	f7ff faba 	bl	800079c <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e1d5      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	2b00      	cmp	r3, #0
 800124c:	d036      	beq.n	80012bc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d019      	beq.n	800128a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800125c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001260:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001262:	f7ff fa9b 	bl	800079c <HAL_GetTick>
 8001266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800126a:	f7ff fa97 	bl	800079c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e1b2      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x49a>
 8001288:	e018      	b.n	80012bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 8001290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001294:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001296:	f7ff fa81 	bl	800079c <HAL_GetTick>
 800129a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800129e:	f7ff fa7d 	bl	800079c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e198      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_RCC_OscConfig+0x520>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8085 	beq.w	80013d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_RCC_OscConfig+0x524>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_RCC_OscConfig+0x524>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80012d6:	f7ff fa61 	bl	800079c <HAL_GetTick>
 80012da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012dc:	e00c      	b.n	80012f8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80012de:	f7ff fa5d 	bl	800079c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b64      	cmp	r3, #100	; 0x64
 80012ea:	d905      	bls.n	80012f8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e178      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012f8:	4b96      	ldr	r3, [pc, #600]	; (8001554 <HAL_RCC_OscConfig+0x784>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ec      	beq.n	80012de <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x54a>
 800130c:	4b92      	ldr	r3, [pc, #584]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	4a91      	ldr	r2, [pc, #580]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6713      	str	r3, [r2, #112]	; 0x70
 8001318:	e02d      	b.n	8001376 <HAL_RCC_OscConfig+0x5a6>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x56c>
 8001322:	4b8d      	ldr	r3, [pc, #564]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	4a8c      	ldr	r2, [pc, #560]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6713      	str	r3, [r2, #112]	; 0x70
 800132e:	4b8a      	ldr	r3, [pc, #552]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001332:	4a89      	ldr	r2, [pc, #548]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	6713      	str	r3, [r2, #112]	; 0x70
 800133a:	e01c      	b.n	8001376 <HAL_RCC_OscConfig+0x5a6>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b05      	cmp	r3, #5
 8001342:	d10c      	bne.n	800135e <HAL_RCC_OscConfig+0x58e>
 8001344:	4b84      	ldr	r3, [pc, #528]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a83      	ldr	r2, [pc, #524]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
 8001350:	4b81      	ldr	r3, [pc, #516]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	4a80      	ldr	r2, [pc, #512]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6713      	str	r3, [r2, #112]	; 0x70
 800135c:	e00b      	b.n	8001376 <HAL_RCC_OscConfig+0x5a6>
 800135e:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	4a7d      	ldr	r2, [pc, #500]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6713      	str	r3, [r2, #112]	; 0x70
 800136a:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800136c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136e:	4a7a      	ldr	r2, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d015      	beq.n	80013aa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137e:	f7ff fa0d 	bl	800079c <HAL_GetTick>
 8001382:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fa09 	bl	800079c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e122      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800139c:	4b6e      	ldr	r3, [pc, #440]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0ee      	beq.n	8001386 <HAL_RCC_OscConfig+0x5b6>
 80013a8:	e014      	b.n	80013d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff f9f7 	bl	800079c <HAL_GetTick>
 80013ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff f9f3 	bl	800079c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e10c      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013c8:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ee      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8101 	beq.w	80015e0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80013de:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013e6:	2b18      	cmp	r3, #24
 80013e8:	f000 80bc 	beq.w	8001564 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	f040 8095 	bne.w	8001520 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a57      	ldr	r2, [pc, #348]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80013fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff f9cb 	bl	800079c <HAL_GetTick>
 8001406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff f9c7 	bl	800079c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0e2      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800141c:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001428:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800142a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <HAL_RCC_OscConfig+0x78c>)
 800142e:	4013      	ands	r3, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	430a      	orrs	r2, r1
 800143c:	4946      	ldr	r1, [pc, #280]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800143e:	4313      	orrs	r3, r2
 8001440:	628b      	str	r3, [r1, #40]	; 0x28
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	3b01      	subs	r3, #1
 8001448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	3b01      	subs	r3, #1
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	b29b      	uxth	r3, r3
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145c:	3b01      	subs	r3, #1
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146a:	3b01      	subs	r3, #1
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001472:	4939      	ldr	r1, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001474:	4313      	orrs	r3, r2
 8001476:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	4a36      	ldr	r2, [pc, #216]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_RCC_OscConfig+0x790>)
 800148a:	4013      	ands	r3, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001490:	00d2      	lsls	r2, r2, #3
 8001492:	4931      	ldr	r1, [pc, #196]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001494:	4313      	orrs	r3, r2
 8001496:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	f023 020c 	bic.w	r2, r3, #12
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	492c      	ldr	r1, [pc, #176]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ae:	f023 0202 	bic.w	r2, r3, #2
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4928      	ldr	r1, [pc, #160]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 80014f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff f950 	bl	800079c <HAL_GetTick>
 80014fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001500:	f7ff f94c 	bl	800079c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e067      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x730>
 800151e:	e05f      	b.n	80015e0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800152a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff f936 	bl	800079c <HAL_GetTick>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff f932 	bl	800079c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e04d      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <HAL_RCC_OscConfig+0x788>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x764>
 8001552:	e045      	b.n	80015e0 <HAL_RCC_OscConfig+0x810>
 8001554:	58024800 	.word	0x58024800
 8001558:	58024400 	.word	0x58024400
 800155c:	fffffc0c 	.word	0xfffffc0c
 8001560:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_RCC_OscConfig+0x81c>)
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_OscConfig+0x81c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	2b01      	cmp	r3, #1
 8001576:	d031      	beq.n	80015dc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0203 	and.w	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d12a      	bne.n	80015dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d122      	bne.n	80015dc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	0a5b      	lsrs	r3, r3, #9
 80015aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d111      	bne.n	80015dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d108      	bne.n	80015dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	0e1b      	lsrs	r3, r3, #24
 80015ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3730      	adds	r7, #48	; 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	58024400 	.word	0x58024400

080015f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e19c      	b.n	800193e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b8a      	ldr	r3, [pc, #552]	; (8001830 <HAL_RCC_ClockConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d910      	bls.n	8001634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b87      	ldr	r3, [pc, #540]	; (8001830 <HAL_RCC_ClockConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 020f 	bic.w	r2, r3, #15
 800161a:	4985      	ldr	r1, [pc, #532]	; (8001830 <HAL_RCC_ClockConfig+0x240>)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b83      	ldr	r3, [pc, #524]	; (8001830 <HAL_RCC_ClockConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e184      	b.n	800193e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d010      	beq.n	8001662 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	4b7b      	ldr	r3, [pc, #492]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800164c:	429a      	cmp	r2, r3
 800164e:	d908      	bls.n	8001662 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001650:	4b78      	ldr	r3, [pc, #480]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4975      	ldr	r1, [pc, #468]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 800165e:	4313      	orrs	r3, r2
 8001660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d010      	beq.n	8001690 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	4b70      	ldr	r3, [pc, #448]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800167a:	429a      	cmp	r2, r3
 800167c:	d908      	bls.n	8001690 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800167e:	4b6d      	ldr	r3, [pc, #436]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	496a      	ldr	r1, [pc, #424]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 800168c:	4313      	orrs	r3, r2
 800168e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d010      	beq.n	80016be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	4b64      	ldr	r3, [pc, #400]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d908      	bls.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80016ac:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	495e      	ldr	r1, [pc, #376]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d010      	beq.n	80016ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d908      	bls.n	80016ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016da:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4953      	ldr	r1, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d010      	beq.n	800171a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	429a      	cmp	r2, r3
 8001706:	d908      	bls.n	800171a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001708:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f023 020f 	bic.w	r2, r3, #15
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4947      	ldr	r1, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001716:	4313      	orrs	r3, r2
 8001718:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d055      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	4940      	ldr	r1, [pc, #256]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001734:	4313      	orrs	r3, r2
 8001736:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d107      	bne.n	8001750 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001740:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d121      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0f6      	b.n	800193e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d107      	bne.n	8001768 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d115      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0ea      	b.n	800193e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d107      	bne.n	8001780 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0de      	b.n	800193e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001780:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0d6      	b.n	800193e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f023 0207 	bic.w	r2, r3, #7
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4925      	ldr	r1, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7fe fffb 	bl	800079c <HAL_GetTick>
 80017a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017aa:	f7fe fff7 	bl	800079c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0be      	b.n	800193e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d1eb      	bne.n	80017aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d010      	beq.n	8001800 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d208      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f023 020f 	bic.w	r2, r3, #15
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x244>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_ClockConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d214      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_RCC_ClockConfig+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 020f 	bic.w	r2, r3, #15
 8001816:	4906      	ldr	r1, [pc, #24]	; (8001830 <HAL_RCC_ClockConfig+0x240>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_RCC_ClockConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e086      	b.n	800193e <HAL_RCC_ClockConfig+0x34e>
 8001830:	52002000 	.word	0x52002000
 8001834:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d010      	beq.n	8001866 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001850:	429a      	cmp	r2, r3
 8001852:	d208      	bcs.n	8001866 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001854:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	4939      	ldr	r1, [pc, #228]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 8001862:	4313      	orrs	r3, r2
 8001864:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d010      	beq.n	8001894 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800187e:	429a      	cmp	r2, r3
 8001880:	d208      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	492e      	ldr	r1, [pc, #184]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 8001890:	4313      	orrs	r3, r2
 8001892:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d010      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d208      	bcs.n	80018c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4922      	ldr	r1, [pc, #136]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d010      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018da:	429a      	cmp	r2, r3
 80018dc:	d208      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4917      	ldr	r1, [pc, #92]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018f0:	f000 f834 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	4912      	ldr	r1, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x35c>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_RCC_ClockConfig+0x358>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_RCC_ClockConfig+0x35c>)
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x360>)
 8001926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x364>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x368>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fee8 	bl	8000708 <HAL_InitTick>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	58024400 	.word	0x58024400
 800194c:	08001cc0 	.word	0x08001cc0
 8001950:	24000004 	.word	0x24000004
 8001954:	24000000 	.word	0x24000000
 8001958:	24000008 	.word	0x24000008

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001962:	4bb3      	ldr	r3, [pc, #716]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800196a:	2b18      	cmp	r3, #24
 800196c:	f200 8155 	bhi.w	8001c1a <HAL_RCC_GetSysClockFreq+0x2be>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	080019dd 	.word	0x080019dd
 800197c:	08001c1b 	.word	0x08001c1b
 8001980:	08001c1b 	.word	0x08001c1b
 8001984:	08001c1b 	.word	0x08001c1b
 8001988:	08001c1b 	.word	0x08001c1b
 800198c:	08001c1b 	.word	0x08001c1b
 8001990:	08001c1b 	.word	0x08001c1b
 8001994:	08001c1b 	.word	0x08001c1b
 8001998:	08001a03 	.word	0x08001a03
 800199c:	08001c1b 	.word	0x08001c1b
 80019a0:	08001c1b 	.word	0x08001c1b
 80019a4:	08001c1b 	.word	0x08001c1b
 80019a8:	08001c1b 	.word	0x08001c1b
 80019ac:	08001c1b 	.word	0x08001c1b
 80019b0:	08001c1b 	.word	0x08001c1b
 80019b4:	08001c1b 	.word	0x08001c1b
 80019b8:	08001a09 	.word	0x08001a09
 80019bc:	08001c1b 	.word	0x08001c1b
 80019c0:	08001c1b 	.word	0x08001c1b
 80019c4:	08001c1b 	.word	0x08001c1b
 80019c8:	08001c1b 	.word	0x08001c1b
 80019cc:	08001c1b 	.word	0x08001c1b
 80019d0:	08001c1b 	.word	0x08001c1b
 80019d4:	08001c1b 	.word	0x08001c1b
 80019d8:	08001a0f 	.word	0x08001a0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019dc:	4b94      	ldr	r3, [pc, #592]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80019e8:	4b91      	ldr	r3, [pc, #580]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	4a90      	ldr	r2, [pc, #576]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80019fa:	e111      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80019fc:	4b8d      	ldr	r3, [pc, #564]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019fe:	61bb      	str	r3, [r7, #24]
    break;
 8001a00:	e10e      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a02:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001a04:	61bb      	str	r3, [r7, #24]
    break;
 8001a06:	e10b      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001a08:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001a0a:	61bb      	str	r3, [r7, #24]
    break;
 8001a0c:	e108      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001a0e:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001a18:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001a24:	4b82      	ldr	r3, [pc, #520]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001a2e:	4b80      	ldr	r3, [pc, #512]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	08db      	lsrs	r3, r3, #3
 8001a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80e1 	beq.w	8001c14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	f000 8083 	beq.w	8001b60 <HAL_RCC_GetSysClockFreq+0x204>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	f200 80a1 	bhi.w	8001ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x114>
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d056      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001a6e:	e099      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d02d      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a7c:	4b6c      	ldr	r3, [pc, #432]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	4a6b      	ldr	r2, [pc, #428]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa6:	4b62      	ldr	r3, [pc, #392]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001ad6:	e087      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001c44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aea:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001afe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b1a:	e065      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b2e:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b5e:	e043      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001c4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ba2:	e021      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001be6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	0a5b      	lsrs	r3, r3, #9
 8001bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0c:	ee17 3a90 	vmov	r3, s15
 8001c10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001c12:	e005      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
    break;
 8001c18:	e002      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c1c:	61bb      	str	r3, [r7, #24]
    break;
 8001c1e:	bf00      	nop
  }

  return sysclockfreq;
 8001c20:	69bb      	ldr	r3, [r7, #24]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	58024400 	.word	0x58024400
 8001c34:	03d09000 	.word	0x03d09000
 8001c38:	003d0900 	.word	0x003d0900
 8001c3c:	017d7840 	.word	0x017d7840
 8001c40:	46000000 	.word	0x46000000
 8001c44:	4c742400 	.word	0x4c742400
 8001c48:	4a742400 	.word	0x4a742400
 8001c4c:	4bbebc20 	.word	0x4bbebc20

08001c50 <__libc_init_array>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	4d0d      	ldr	r5, [pc, #52]	; (8001c88 <__libc_init_array+0x38>)
 8001c54:	4c0d      	ldr	r4, [pc, #52]	; (8001c8c <__libc_init_array+0x3c>)
 8001c56:	1b64      	subs	r4, r4, r5
 8001c58:	10a4      	asrs	r4, r4, #2
 8001c5a:	2600      	movs	r6, #0
 8001c5c:	42a6      	cmp	r6, r4
 8001c5e:	d109      	bne.n	8001c74 <__libc_init_array+0x24>
 8001c60:	4d0b      	ldr	r5, [pc, #44]	; (8001c90 <__libc_init_array+0x40>)
 8001c62:	4c0c      	ldr	r4, [pc, #48]	; (8001c94 <__libc_init_array+0x44>)
 8001c64:	f000 f820 	bl	8001ca8 <_init>
 8001c68:	1b64      	subs	r4, r4, r5
 8001c6a:	10a4      	asrs	r4, r4, #2
 8001c6c:	2600      	movs	r6, #0
 8001c6e:	42a6      	cmp	r6, r4
 8001c70:	d105      	bne.n	8001c7e <__libc_init_array+0x2e>
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c78:	4798      	blx	r3
 8001c7a:	3601      	adds	r6, #1
 8001c7c:	e7ee      	b.n	8001c5c <__libc_init_array+0xc>
 8001c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c82:	4798      	blx	r3
 8001c84:	3601      	adds	r6, #1
 8001c86:	e7f2      	b.n	8001c6e <__libc_init_array+0x1e>
 8001c88:	08001cd0 	.word	0x08001cd0
 8001c8c:	08001cd0 	.word	0x08001cd0
 8001c90:	08001cd0 	.word	0x08001cd0
 8001c94:	08001cd4 	.word	0x08001cd4

08001c98 <memset>:
 8001c98:	4402      	add	r2, r0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <memset+0xa>
 8001ca0:	4770      	bx	lr
 8001ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ca6:	e7f9      	b.n	8001c9c <memset+0x4>

08001ca8 <_init>:
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001caa:	bf00      	nop
 8001cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cae:	bc08      	pop	{r3}
 8001cb0:	469e      	mov	lr, r3
 8001cb2:	4770      	bx	lr

08001cb4 <_fini>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	bf00      	nop
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr
